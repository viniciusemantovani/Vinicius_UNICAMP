%Open Archives
% ----------------------------------------------------------------------------
[data_chirp fs_chirp] = audioread("chirp.wav");
[data_train fs_train] = audioread("train.wav");

% Variables for filters
% ----------------------------------------------------------------------------
cut_freq_butter = 2300;
cut_freq_cheby1 = 2300;
cut_freq_cheby2 = 2300;
cut_freq_eliptic = 2300;

order_b = 3;
order_c1 = 3;
order_c2 = 3;
order_e = 3;

% Summing the audios
% ----------------------------------------------------------------------------
% Resample chirp.wav to match the sampling frequency of train.wav
if fs_chirp ~= fs_train
    data_chirp = resample(data_chirp, fs_train, fs_chirp);
    fs_chirp = fs_train;  % Now both have the same sampling rate
end

% Determine the lengths of both audio signals
len_chirp = length(data_chirp);
len_train = length(data_train);

% Tile and pad the shorter signal with zeros to match the length of the longer signal
data_chirp_aux = data_chirp;
while length(data_chirp_aux) < len_train - len_chirp
    data_chirp_aux = [data_chirp_aux; data_chirp];
end
data_chirp = [data_chirp_aux; zeros(len_train - length(data_chirp_aux), 2)];

% Mix the signals by adding them together
data_mixed = data_chirp + data_train;

% Save the mixed audio to a new file
output_filename = 'mixed_audio.wav';
audiowrite(output_filename, data_mixed, fs_train);

% Compute and Plot the FFT of the train
% ----------------------------------------------------------------------------
n_train = length(data_train);
f_train = (0:floor(n_train/2)-1) * (fs_train / n_train);
plotFFT(data_train, f_train, n_train, "train", "");

% Compute the FFT of the mixed signal
% ----------------------------------------------------------------------------
n_mixed = length(data_mixed);
plotFFT(data_mixed, f_train, n_mixed, "mixed", "");

% Compute and Plot the FFT of chirp
% ----------------------------------------------------------------------------
n_chirp = length(data_chirp);
plotFFT(data_chirp, f_train, n_chirp, "chirp", "");

% Define the butterworth filter
% ----------------------------------------------------------------------------
[N_butter, D_butter] = butter(order_b, cut_freq_butter/(fs_train/2), "high");

figure;

freqz(N_butter,D_butter,[],fs_train)
title('Butterworth filter');

subplot(2,1,1)
ylim([-100 20])

filtered_chirp = filter(N_butter, D_butter, data_chirp);
filtered_train = filter(N_butter, D_butter, data_train);
filtered_mixed = filter(N_butter, D_butter, data_mixed);

% Print the transfer function
disp('Transfer function of Butterworf:')
BT = tf(flip(N_butter), flip(D_butter), fs_train)

% Plot Z plane
figure;
zplane(N_butter, D_butter);
title('Butter poles and zeroes');

sos_butter = tf2sos(N_butter, D_butter)
disp('Transfer function second order 1 butter:')
tf(sos_butter(1, 1:3), sos_butter(1, 4:6))
disp('Transfer function second order 2 butter:')
tf(sos_butter(2, 1:3), sos_butter(2, 4:6))

% Plot fft of chirp filtered with butterworth
% ----------------------------------------------------------------------------
plotFFT(filtered_chirp, f_train, n_chirp, "chirp", "butter");

% Plot fft of train filtered with butterworth
% ----------------------------------------------------------------------------
plotFFT(filtered_train, f_train, n_train, "train", "butter");

% Plot fft of the mixed audio filtered with butterworth
% ----------------------------------------------------------------------------
plotFFT(filtered_mixed, f_train, n_mixed, "mixed", "butter");

% Define chebyshev 1 filter
% ----------------------------------------------------------------------------
[N_cheby_t1, D_cheby_t1] = cheby1(order_c1, 5, cut_freq_cheby1/(fs_train/2), "high");

figure;

freqz(N_cheby_t1,D_cheby_t1,[],fs_train)
title('Chebyshev filter t1');

subplot(2,1,1)
ylim([-100 20])

filtered_chirp_cheby_t1 = filter(N_cheby_t1, D_cheby_t1, data_chirp);
filtered_train_cheby_t1 = filter(N_cheby_t1, D_cheby_t1, data_train);
filtered_mixed_cheby_t1 = filter(N_cheby_t1, D_cheby_t1, data_mixed);

% Print the transfer function
disp('Transfer function of Chebychev 1:')
C1T = tf(N_cheby_t1, D_cheby_t1, fs_train)

% Plot Z plane
figure;
zplane(N_cheby_t1, D_cheby_t1);
title('Cheby 1 poles and zeroes');

sos_cheby_t1 = tf2sos(N_cheby_t1, D_cheby_t1)

disp('Transfer function second order 1 cheby1:')
tf(sos_cheby_t1(1, 1:3), sos_cheby_t1(1, 4:6))
disp('Transfer function second order 2 cheby1:')
tf(sos_cheby_t1(2, 1:3), sos_cheby_t1(2, 4:6))

% Plot fft of chirp filtered with cheby_t1
% ----------------------------------------------------------------------------
plotFFT(filtered_chirp_cheby_t1, f_train, n_chirp, "chirp", "cheby-t1");

% Plot fft of train filtered with cheby_t1
% ----------------------------------------------------------------------------
plotFFT(filtered_train_cheby_t1, f_train, n_train, "train", "cheby-t1");

% Plot fft of the mixed audio filtered with chebyshev 1
% ----------------------------------------------------------------------------
plotFFT(filtered_mixed_cheby_t1, f_train, n_mixed, "mixed", "cheby-t1");

% Define chebyshev 2 filter
% ----------------------------------------------------------------------------
[N_cheby_t2, D_cheby_t2] = cheby2(order_c2, 15, cut_freq_cheby2/(fs_train/2), "high");

figure;

freqz(N_cheby_t2,D_cheby_t2,[],fs_train)
title('Chebyshev filter t2');

subplot(2,1,1)
ylim([-100 20])

filtered_chirp_cheby_t2 = filter(N_cheby_t2, D_cheby_t2, data_chirp);
filtered_train_cheby_t2 = filter(N_cheby_t2, D_cheby_t2, data_train);
filtered_mixed_cheby_t2 = filter(N_cheby_t2, D_cheby_t2, data_mixed);

% Print the transfer function
disp('Transfer function of Chebychev 2:')
C2T = tf(N_cheby_t2, D_cheby_t2, fs_train)

% Plot Z plane
figure;
zplane(N_cheby_t2, D_cheby_t2);
title('Cheby 2 poles and zeroes');

sos_cheby_t2 = tf2sos(N_cheby_t2, D_cheby_t2)

disp('Transfer function second order 1 cheby2:')
tf(sos_cheby_t1(1, 1:3), sos_cheby_t1(1, 4:6))
disp('Transfer function second order 2 cheby2:')
tf(sos_cheby_t1(2, 1:3), sos_cheby_t1(2, 4:6))

% Plot fft of chirp filtered with cheby_t 
% ----------------------------------------------------------------------------
plotFFT(filtered_chirp_cheby_t2, f_train, n_chirp, "chirp", "cheby-t2");

% Plot fft of train filtered with cheby_t2
% ----------------------------------------------------------------------------
plotFFT(filtered_train_cheby_t2, f_train, n_train, "train", "cheby-t2");

% Plot fft of the mixed audio filtered with chebyshev 2
% ----------------------------------------------------------------------------
plotFFT(filtered_mixed_cheby_t2, f_train, n_mixed, "mixed", "cheby-t2");

% Define eliptic filter
% ----------------------------------------------------------------------------
[N_eliptic, D_eliptic] = ellip(order_e,4,50, cut_freq_eliptic/(fs_train/2), "high");

figure;

freqz(N_eliptic,D_eliptic,[],fs_train)
title('eliptic filter');

subplot(2,1,1)
ylim([-100 20])

filtered_chirp_eliptic = filter(N_eliptic, D_eliptic, data_chirp);
filtered_train_eliptic = filter(N_eliptic, D_eliptic, data_train);
filtered_mixed_eliptic = filter(N_eliptic, D_eliptic, data_mixed);

% Print the transfer function
disp('Transfer function of Eliptic:')
ET = tf(N_eliptic, D_eliptic, fs_train)

% Plot Z plane
figure;
zplane(N_eliptic, D_eliptic);
title('Eliptic poles and zeroes');

sos_eliptic = tf2sos(N_eliptic, D_eliptic)

% Plot fft of chirp filtered with eliptic
% ----------------------------------------------------------------------------
plotFFT(filtered_chirp_eliptic, f_train, n_chirp, "chirp", "eliptic");

% Plot fft of train filtered with eliptic
% ----------------------------------------------------------------------------
plotFFT(filtered_train_eliptic, f_train, n_train, "train", "eliptic");

% Plot fft of the mixed audio filtered with eliptic
% ----------------------------------------------------------------------------
plotFFT(filtered_mixed_eliptic, f_train, n_mixed, "mixed", "eliptic");

% Write archives after butter filtering
% ----------------------------------------------------------------------------
audiowrite('chirp_butter.wav', filtered_chirp, fs_train);
audiowrite('train_butter.wav', filtered_train, fs_train);
audiowrite('mixed_butter.wav', filtered_mixed, fs_train);

audiowrite('chirp_cheby_t1.wav', filtered_chirp_cheby_t1, fs_train);
audiowrite('train_cheby_t1.wav', filtered_train_cheby_t1, fs_train);
audiowrite('mixed_cheby_t1.wav', filtered_mixed_cheby_t1, fs_train);

audiowrite('chirp_cheby_t2.wav', filtered_chirp_cheby_t2, fs_train);
audiowrite('train_cheby_t2.wav', filtered_train_cheby_t2, fs_train);
audiowrite('mixed_cheby_t2.wav', filtered_mixed_cheby_t2, fs_train);

audiowrite('chirp_eliptic.wav', filtered_chirp_eliptic, fs_train);
audiowrite('train_eliptic.wav', filtered_train_eliptic, fs_train);
audiowrite('mixed_eliptic.wav', filtered_mixed_eliptic, fs_train);

% Function for plotting FFTs
% ----------------------------------------------------------------------------
function [] = plotFFT(signal, f, n, signal_name, filter_name)

    signal_fft = fft(signal);
    signal_fft = signal_fft(1:floor(n/2));
    
    % Magnitude of the FFT
    magnitude = abs(signal_fft) / n;
    
    % Plot the FFT
    figure;
    plot(f, magnitude);
    xlabel('Frequency (Hz)');
    ylabel('Magnitude');
    title(sprintf('FFT of %s audio %s', signal_name, filter_name));

end